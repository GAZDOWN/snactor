#!/usr/bin/env python
""" Execute an actor using snactor """
import json
import logging
import os
import sys
import yaml
from argparse import ArgumentParser

from snactor.loader import load, load_schemas, validate_actor_types, get_actor

__version__ = '0.1.0'


def parse_arguments():
    """ Define and process cli arguments """
    parser = ArgumentParser()

    parser.add_argument("actor",
                        help="execute actor",
                        type=str)

    parser.add_argument('--user',
                        default='root',
                        help="User to use for remote execution")

    parser.add_argument('--host',
                        default=None,
                        help="Remote host")

    parser.add_argument('--actors_dir',
                        default=os.environ.get('SNACTOR_ACTORS_DIR'),
                        help="path containing actor(s) definition")

    parser.add_argument('--schemas_dir',
                        default=os.environ.get('SNACTOR_SCHEMAS_DIR'),
                        help="path containing schema(s) definition")

    parser.add_argument('--config',
                        default=None,
                        help="file containing snactor configuration")

    parser.add_argument('--validate',
                        action='store_true',
                        default=False,
                        help="validate loaded actors and schemas")

    parser.add_argument('-d', '--debug',
                        action='store_true',
                        default=False,
                        help="display debug messages")

    parser.add_argument('-v', '--version',
                        action='version',
                        version=__version__,
                        help='display version information')

    return parser.parse_args()


def find_config_file(args):
    """ Return available config file passed by argument, at cwd or homedir """
    paths = []

    path = args.config
    if path is not None:
        if os.path.isdir(path):
            path += '/snactor.cfg'
    paths.append(path)

    try:
        path = os.getcwd() + '/snactor.cfg'
    except OSError:
        path = None
    paths.append(path)

    paths.append(os.path.expanduser('~/.snactor.cfg'))

    for path in paths:
        if path is not None and os.path.exists(path):
            break
    else:
        path = None

    return path


def load_actors(actors_dir, schemas_dir):
    """ Load and validade actors and schemas """
    if not actors_dir:
        actors_dir = os.getcwd()

    if not schemas_dir:
        schemas_dir = os.getcwd()

    logging.debug("Loading actors definition: %s", actors_dir)
    load(actors_dir)
    logging.debug("Loading schemas definition: %s", schemas_dir)
    load_schemas(schemas_dir)


def main():
    """ Execute actor passing and retrieving data"""
    args = parse_arguments()

    logging_level = logging.DEBUG if args.debug else logging.INFO
    logging.basicConfig(stream=sys.stderr,
                        format='%(asctime)s [%(levelname)s %(name)s]: %(message)s',
                        level=logging_level)

    config_file = find_config_file(args)
    logging.debug("Found config file: %s", config_file)
    if config_file:
        with open(config_file, 'r') as ymlfile:
            cfg = yaml.load(ymlfile)

    actors_dir = args.actors_dir
    if actors_dir is None:
        actors_dir = cfg.get('actors_dir')

    schemas_dir = args.schemas_dir
    if schemas_dir is None:
        schemas_dir = cfg.get('schemas_dir')

    load_actors(actors_dir, schemas_dir)
    if args.validate:
        logging.debug("Validating actors/schemas")
        validate_actor_types()

    data = {}
    if not sys.stdin.isatty():
        logging.debug("Reading input data from stdin")
        try:
            data = json.load(sys.stdin)
        except ValueError as err:
            logging.error("Unable to load input data: %s", err)
            sys.exit(1)

    actor = get_actor(args.actor)
    if not actor:
        logging.error("Unable to find actor: %s", args.actor)
        sys.exit(1)

    if args.host:
        success = not actor.execute_remote(data, args.host, args.user)
    else:
        success = not actor.execute(data)
    print(json.dumps(data))

    sys.exit(success)


if __name__ == '__main__':
    main()
